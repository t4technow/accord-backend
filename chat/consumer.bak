import json
from channels.generic.websocket import AsyncWebsocketConsumer
from channels.db import database_sync_to_async
from django.contrib.auth import get_user_model

User = get_user_model()


class ChatConsumer(AsyncWebsocketConsumer):
    async def websocket_connect(self, event):
        print("connected", event)
        user = self.scope["user"]
        chat_room = f"user_chatroom_{user.id}"
        self.chat_room = chat_room
        await self.channel_layer.group_add(chat_room, self.channel_name)
        await self.accept()

    async def websocket_receive(self, event):
        dmp = json.loads(event["text"])
        message = dmp.get("message")
        sender_id = dmp.get("sender")
        server = dmp.get("server")
        channel = dmp.get("channel")
        print("received", event)

        sender = await self.get_user_object(sender_id)
        receiver = await self.get_user_object(channel)
        if not sender:
            print("Invalid sender")
        if not receiver:
            print("invalid receiver")

        receiver_chat_room = f"user_chatroom_{channel}"
        self.user = self.scope["user"]

        response = {
            "message": message,
            "sender": self.user.id,
        }

        await self.channel_layer.group_send(
            receiver_chat_room, {"type": "send_chat_message", "text": json.dumps(response)}
        )

        await self.channel_layer.group_send(
            self.chat_room, {"type": "send_chat_message", "text": json.dumps(response)}
        )

    async def websocket_disconnect(self, event):
        print("disconnected", event)

    async def send_chat_message(self, event):
        print(event, '----------------------------')
        message = event["text"]
        await self.send(text_data=message)

    @database_sync_to_async
    def get_user_object(self, user_id):
        qs = User.objects.filter(id=user_id)
        if qs.exists():
            obj = qs.first()
        else:
            obj = None

        return obj
